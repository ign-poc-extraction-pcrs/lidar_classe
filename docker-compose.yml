version: '3'

services:
  demo-lidarhd-classe:
    container_name: demo-lidarhd-classe
    build:
      context: "."  
      dockerfile: Dockerfile
      args:    
        - http_proxy
        - https_proxy
    environment:
      - HTTP_PROXY=${HTTP_PROXY}
      - HTTPS_PROXY=${HTTPS_PROXY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - BUCKET_NAME=${BUCKET_NAME}
      - ENDPOINT_URL=${ENDPOINT_URL}
      - REGION_NAME=${REGION_NAME}
      - HOST_SERVEUR=${HOST_SERVEUR}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${DATABASE}
      - HOST=${HOST}
    ports:
      - '5000:5000'
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy
  
  db:
    image: kartoza/postgis:15-3.3
    # volumes:
    #   - postgis-data:/var/lib/postgresql
    #   - dbbackups:/backups
    environment:
      # If you need to create multiple database you can add coma separated databases eg gis,data
      - POSTGRES_DB=${DATABASE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASSWORD}
      - ALLOW_IP_RANGE=0.0.0.0/0
      # Add extensions you need to be enabled by default in the DB. Default are the five specified below
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
      - RUN_AS_ROOT=true
    ports:
      - "5432"
    restart: on-failure
    healthcheck:
      test: "PGPASSWORD=$POSTGRES_PASSWORD pg_isready -h 127.0.0.1 -U $POSTGRES_USER -d $DATABASE"
      interval: 10s
      timeout: 10s
      retries: 4

  adminer:
    image: adminer
    restart: always
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8080:8080
